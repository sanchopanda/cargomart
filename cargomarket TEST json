from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import os
import json
import gspread
from google.oauth2.service_account import Credentials
import time

script_dir = os.path.dirname(os.path.abspath(__file__))

# Путь к вашему chromedriver
chrome_driver_path = os.path.join(script_dir, '/Users/altdan/Documents/Project/ATI/cargomart/chromedriver-mac-arm64/chromedriver')

# Данные для авторизации
username = "a.ivanov@dsg-logist.ru"
password = "quCBdj4z"

# Настройки для Chrome
chrome_options = Options()
chrome_options.add_argument("--start-maximized")
chrome_options.add_argument("--disable-notifications")
chrome_options.add_argument("--disable-popup-blocking")
chrome_options.add_argument("--window-size=1920,1080")
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--no-sandbox")

# Инициализация Chrome Driver
print("Инициализация Chrome Driver...")
service = Service(executable_path=chrome_driver_path)
driver = webdriver.Chrome(service=service, options=chrome_options)

# Открытие страницы логина
print("Браузер запущен. Открытие страницы логина...")
driver.get("https://cargomart.ru/login/")

# Ввод данных для авторизации с ожиданиями
try:
    login_field = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "login")))
    login_field.send_keys(username)
    print("Логин введен.")

    password_field = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "password")))
    password_field.send_keys(password)
    print("Пароль введен.")

    submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
    submit_button.click()
    print("Нажата кнопка Войти.")

    # Ожидание загрузки страницы после авторизации и переход на страницу заявок
    WebDriverWait(driver, 10).until(EC.url_contains("orders/active"))
    print("Успешная авторизация.")

    # Переход на страницу заявок, если нужно
    driver.get("https://cargomart.ru/orders/active")
    print("Открыта страница заявок.")
except Exception as e:
    print(f"Ошибка авторизации: {e}")
    driver.quit()
    exit()

# Сохранение куков после авторизации
cookies = driver.get_cookies()
print("Куки сохранены.")

# Параметры для Google Sheets
creds_path = os.path.join(script_dir, 'credentials.json')
spreadsheet_name = 'Logist Pro'

# Укажите scopes для работы с Google Sheets
scopes = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']

# Загрузка учетных данных и авторизация
try:
    creds = Credentials.from_service_account_file(creds_path, scopes=scopes)
    client = gspread.authorize(creds)
    spreadsheet = client.open(spreadsheet_name)
    worksheet = spreadsheet.sheet1  # Открываем первый лист
    print("Успешно подключились к Google Sheets.")
except Exception as e:
    print(f"Ошибка подключения к Google Sheets: {e}")
    driver.quit()
    exit()

# Определение заголовков столбцов
headers = ['ID', 'Тип груза', 'Тип кузова', 'Дата', 'Вес', 'Точка А', 'Дата прибытия на точку А', 'Время прибытия на точку А', 
           'Точка Б', 'Дата прибытия на точку Б', 'Время прибытия на точку Б', 'Ставка', 'Фирма', 'Город', 'Телефон']
try:
    worksheet.append_row(headers)
except Exception as e:
    print(f"Ошибка при добавлении заголовков в Google Sheets: {e}")
    driver.quit()
    exit()

# Функция для экспорта данных в Google Sheets
def export_to_google_sheets(order_data):
    row = [
        order_data.get('id', 'NONE'),
        order_data.get('cargoType', 'NONE'),
        order_data.get('truckType', {}).get('name', 'NONE'),
        order_data.get('createDate', 'NONE'),
        order_data.get('loadWeight', 'NONE'),
        order_data.get('routePoint', [])[0].get('address', 'NONE'),
        order_data.get('routePoint', [])[0].get('workSchedule', [])[0].get('fromDate', 'NONE'),
        order_data.get('routePoint', [])[0].get('workSchedule', [])[0].get('fromTime', 'NONE'),
        order_data.get('routePoint', [])[1].get('address', 'NONE'),
        order_data.get('routePoint', [])[1].get('workSchedule', [])[0].get('fromDate', 'NONE'),
        order_data.get('routePoint', [])[1].get('workSchedule', [])[0].get('fromTime', 'NONE'),
        order_data.get('currentPrice', 'NONE'),
        'ООО "Фортуна-Аэро-Карго"',
        'Москва',
        '+79613423284'
    ]
    
    try:
        worksheet.append_row(row)
        print("Данные успешно записаны в Google Sheets.")
    except Exception as e:
        print(f"Ошибка при добавлении данных в Google Sheets: {e}")

# Функция для получения JSON данных о заявке в текущей вкладке
def get_order_json(order_id):
    url = f"https://cargomart.ru/api/v2/order/{order_id}"  # Правильный URL с ID заявки
    print(f"Открываем JSON по ссылке: {url}")  # Добавляем вывод ссылки
    try:
        # Открытие JSON данных заявки в новой вкладке
        driver.execute_script(f"window.open('{url}', '_blank');")
        driver.switch_to.window(driver.window_handles[-1])
        
        # Ожидание загрузки JSON данных
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//pre"))
        )
        
        # Получаем содержимое JSON
        json_content = driver.find_element(By.XPATH, "//pre").text
        return json.loads(json_content)
    except Exception as e:
        print(f"Ошибка при запросе JSON: {e}")
        return None

# Функция для парсинга всех заявок на странице
def parse_orders():
    print("Начинаем парсинг заявок...")

    # Поиск всех заявок на текущей странице
    order_rows = WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, 'div[data-name="tableRow"]')))[1:]

    for row in order_rows:
        try:
            # Открываем заявку
            row.click()
            print("Заявка открыта.")
            
            # Ожидание открытия страницы заявки
            time.sleep(2)

            # Извлекаем ID заявки из URL
            current_url = driver.current_url
            if "modal=order-view%3Fhash%3D" in current_url:
                # Извлекаем ID заявки из URL
                order_id = current_url.split("modal=order-view%3Fhash%3D")[-1][:32]  # Извлекаем ID заявки из URL, ограничиваем до 32 символов

                # Получаем JSON данных заявки
                order_data = get_order_json(order_id)

                if order_data:
                    export_to_google_sheets(order_data)

                # Возврат на страницу списка заявок
                driver.execute_script("window.history.go(-1)")  # Используем JavaScript для возврата
                time.sleep(2)
            else:
                print("Не удалось извлечь ID заявки из URL.")
                driver.execute_script("window.history.go(-1)")
                time.sleep(2)

        except Exception as e:
            print(f"Ошибка при обработке заявки: {e}")

# Переход по страницам и парсинг заявок
def navigate_and_parse():
    while True:
        parse_orders()

        try:
            # Переход на следующую страницу, если кнопка есть
            next_button = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'button[class*="ml-1"]')))
            next_button.click()
            print("Переход на следующую страницу.")
            time.sleep(3)
        except Exception as e:
            print(f"Не удалось найти кнопку перехода на следующую страницу: {e}")
            break

# Использование сохраненных куков
driver.get("https://cargomart.ru/orders/active")  # Переход на страницу заявок перед установкой куков
for cookie in cookies:
    driver.add_cookie(cookie)

# Запуск парсинга
navigate_and_parse()

# Завершение программы
print("Парсинг завершен.")
driver.quit()